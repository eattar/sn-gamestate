# TrackLab SoccerNet config with Improved Jersey Recognition

# The defaults list contains the files that will be used
# to create the final config file. This item *must* be
# the first element in the file.
# Detailed configs for each default component below are located in "sn-gamestate/sn-gamestate/configs" and "tracklab/tracklab/configs"
# Define here which implementation (yolov8, oc_sort, ..) to use for each generic (detection, tracking, ...) component.
defaults:
  - dataset: soccernet_gs
  - eval: gs_hota
  - engine: offline
  - visualization: gamestate  # Save tracking results as a .mp4 video in the run directory specified below (sn-gamestate/outputs/...)
  - modules/bbox_detector: yolo_ultralytics
  - modules/reid: prtreid
  - modules/track: bpbreid_strong_sort
  - modules/jersey_number_detect: improved_mmocr  # Using improved jersey recognition
  - modules/team: kmeans_embeddings
  - modules/team_side: mean_position
  - modules/tracklet_agg: voting_role_jn  # Using baseline aggregation since improved module handles tracklet-level processing
  - modules/pitch : nbjw_calib
  - modules/calibration: nbjw_calib
  - _self_

# Pipeline definition :
# - Defines the order in which the modules will be called
# - If loading a tracking state from disk, remove modules whose outputs are already provided in the loaded state
# Use 'pipeline: []' for an empty pipeline (e.g. when loading all tracking results from a saved .pklz tracker state)
pipeline:
  - bbox_detector
  - reid
  - track
  - pitch
  - calibration
  - jersey_number_detect
  - tracklet_agg
  - team
  - team_side


# Experiment name
experiment_name: "sn-gamestate-improved-jersey-single-video"

# Path definitions
home_dir: "${oc.env:HOME}"
data_dir: "/netscratch/eattar/ds/SoccerNet/2024/data"
model_dir: "${project_dir}/pretrained_models"

# Machine configuration
num_cores: 1
use_wandb: True
use_rich: True

modules: # Allows module-specific batch_size and other configuration
  bbox_detector: {batch_size: 4}  # Reduced for single video processing
  pose_bottomup: {batch_size: 4}  # Reduced for single video processing
  reid: {batch_size: 32}  # Reduced for single video processing
  track: {batch_size: 32}  # Reduced for single video processing
  pitch: {batch_size: 1}
  calibration: {batch_size: 1}
  jersey_number_detect: {batch_size: 4}  # Reduced for single video processing

# Flags
test_tracking: True
eval_tracking: True
print_config: True

# Dataset
dataset:
  nvid: 1  # Process only 1 video for faster testing
#  nframes: 100  # Uncomment to test on only 100 frames for quick debugging
  eval_set: "valid"  # Tracking is performed on the SoccerNet validation set. Choose from {"train", "valid", "test", "challenge"}.
  dataset_path: ${data_dir}/SoccerNetGS  # The SoccerNet game state dataset is located under the data path (defined above) in the 'SoccerNetGS' folder
  vids_dict: # Use one key per split (valid, test, etc)
    valid: []  # Empty list = process first available video automatically. Specify explicitly which video to apply tracking on, e.g. ['SNGS-04', 'SNGS-51'] if you know valid IDs.
    # To find valid video IDs, run with empty list first, then check the output directory for the processed video name

# Tracker state (save computation time by dumping tracking results on disk for later re-use)
# Dump tracking results to a .pcklz file to save computation time on the next run. Have a look at TrackLab tutorials for more details.
state:
  save_file: null  # Disable saving to force fresh computation
  load_file: null  # Disable loading from previous runs

# Visualization
visualization:
  cfg:
    save_videos: True  # Save a .mp4 video on disk with the game state reconstruction output (see 'tracklab/tracklab/configs/visualization' for more options)

# configure Hydra to use the current working directory
# and set up the output directory according to experiment_name
project_dir: "${hydra:runtime.cwd}"
hydra:
  output_subdir: "configs"
  job:
    chdir: True
  run:
    dir: "/netscratch/eattar/SoccerNet/outputs/${experiment_name}/${now:%Y-%m-%d}/${now:%H-%M-%S}"
  sweep:
    dir: "multirun_outputs/${experiment_name}/${now:%Y-%m-%d}/${now:%H-%M-%S}"
